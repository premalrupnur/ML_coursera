function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    
      hypothesis = X*theta;
      
      costfunc =  (hypothesis - y).^2;
       
      J = X' * (hypothesis - y)  ;
      differential = J/m ;
  
      theta = theta - alpha*differential;
      J_history(iter) = sum(costfunc)/(2*m) ;
      
      
    






    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end
    figure;
    Xlim([1 1000]);
    plot(num_iters,J_history,'-',"Markersize",10,"Markeredgecolor",'red');
    
    J_history;
    theta;
 

end
